# Generated from D:/Victor/Projetos/Jauan\jauan.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,271,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
        12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,
        14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
        16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,4,18,148,8,18,11,
        18,12,18,149,1,19,1,19,1,19,1,19,1,19,1,19,1,20,4,20,159,8,20,11,
        20,12,20,160,1,20,1,20,4,20,165,8,20,11,20,12,20,166,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,3,21,188,8,21,1,22,1,22,1,22,5,22,193,8,22,10,
        22,12,22,196,9,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,
        27,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,
        29,220,8,29,1,30,1,30,1,30,5,30,225,8,30,10,30,12,30,228,9,30,1,
        30,1,30,1,31,1,31,1,31,1,31,3,31,236,8,31,1,32,1,32,1,32,1,32,1,
        33,1,33,1,33,1,33,5,33,246,8,33,10,33,12,33,249,9,33,1,33,3,33,252,
        8,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,5,34,262,8,34,10,34,
        12,34,265,9,34,1,34,1,34,1,34,1,34,1,34,3,226,247,263,0,35,1,1,3,
        2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,1,0,
        4,3,0,65,90,95,95,97,122,1,0,48,57,2,0,60,60,62,62,3,0,9,10,12,13,
        32,32,290,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
        0,0,0,1,71,1,0,0,0,3,76,1,0,0,0,5,78,1,0,0,0,7,82,1,0,0,0,9,84,1,
        0,0,0,11,86,1,0,0,0,13,88,1,0,0,0,15,90,1,0,0,0,17,97,1,0,0,0,19,
        101,1,0,0,0,21,103,1,0,0,0,23,106,1,0,0,0,25,111,1,0,0,0,27,117,
        1,0,0,0,29,123,1,0,0,0,31,129,1,0,0,0,33,135,1,0,0,0,35,140,1,0,
        0,0,37,147,1,0,0,0,39,151,1,0,0,0,41,158,1,0,0,0,43,187,1,0,0,0,
        45,189,1,0,0,0,47,197,1,0,0,0,49,199,1,0,0,0,51,201,1,0,0,0,53,203,
        1,0,0,0,55,205,1,0,0,0,57,207,1,0,0,0,59,219,1,0,0,0,61,221,1,0,
        0,0,63,235,1,0,0,0,65,237,1,0,0,0,67,241,1,0,0,0,69,257,1,0,0,0,
        71,72,5,109,0,0,72,73,5,97,0,0,73,74,5,105,0,0,74,75,5,110,0,0,75,
        2,1,0,0,0,76,77,5,58,0,0,77,4,1,0,0,0,78,79,5,101,0,0,79,80,5,110,
        0,0,80,81,5,100,0,0,81,6,1,0,0,0,82,83,5,40,0,0,83,8,1,0,0,0,84,
        85,5,41,0,0,85,10,1,0,0,0,86,87,5,44,0,0,87,12,1,0,0,0,88,89,5,59,
        0,0,89,14,1,0,0,0,90,91,5,114,0,0,91,92,5,101,0,0,92,93,5,116,0,
        0,93,94,5,117,0,0,94,95,5,114,0,0,95,96,5,110,0,0,96,16,1,0,0,0,
        97,98,5,118,0,0,98,99,5,97,0,0,99,100,5,114,0,0,100,18,1,0,0,0,101,
        102,5,61,0,0,102,20,1,0,0,0,103,104,5,105,0,0,104,105,5,102,0,0,
        105,22,1,0,0,0,106,107,5,101,0,0,107,108,5,108,0,0,108,109,5,115,
        0,0,109,110,5,101,0,0,110,24,1,0,0,0,111,112,5,119,0,0,112,113,5,
        104,0,0,113,114,5,105,0,0,114,115,5,108,0,0,115,116,5,101,0,0,116,
        26,1,0,0,0,117,118,5,115,0,0,118,119,5,99,0,0,119,120,5,97,0,0,120,
        121,5,110,0,0,121,122,5,102,0,0,122,28,1,0,0,0,123,124,5,112,0,0,
        124,125,5,114,0,0,125,126,5,105,0,0,126,127,5,110,0,0,127,128,5,
        116,0,0,128,30,1,0,0,0,129,130,5,98,0,0,130,131,5,114,0,0,131,132,
        5,101,0,0,132,133,5,97,0,0,133,134,5,107,0,0,134,32,1,0,0,0,135,
        136,5,116,0,0,136,137,5,114,0,0,137,138,5,117,0,0,138,139,5,101,
        0,0,139,34,1,0,0,0,140,141,5,102,0,0,141,142,5,97,0,0,142,143,5,
        108,0,0,143,144,5,115,0,0,144,145,5,101,0,0,145,36,1,0,0,0,146,148,
        3,49,24,0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,1,0,0,0,149,150,
        1,0,0,0,150,38,1,0,0,0,151,152,5,99,0,0,152,153,5,111,0,0,153,154,
        5,110,0,0,154,155,5,115,0,0,155,156,5,116,0,0,156,40,1,0,0,0,157,
        159,3,49,24,0,158,157,1,0,0,0,159,160,1,0,0,0,160,158,1,0,0,0,160,
        161,1,0,0,0,161,162,1,0,0,0,162,164,5,46,0,0,163,165,3,49,24,0,164,
        163,1,0,0,0,165,166,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,
        42,1,0,0,0,168,169,5,105,0,0,169,170,5,110,0,0,170,188,5,116,0,0,
        171,172,5,115,0,0,172,173,5,116,0,0,173,188,5,114,0,0,174,175,5,
        102,0,0,175,176,5,108,0,0,176,177,5,111,0,0,177,178,5,97,0,0,178,
        188,5,116,0,0,179,180,5,98,0,0,180,181,5,111,0,0,181,182,5,111,0,
        0,182,188,5,108,0,0,183,184,5,118,0,0,184,185,5,111,0,0,185,186,
        5,105,0,0,186,188,5,100,0,0,187,168,1,0,0,0,187,171,1,0,0,0,187,
        174,1,0,0,0,187,179,1,0,0,0,187,183,1,0,0,0,188,44,1,0,0,0,189,194,
        3,47,23,0,190,193,3,47,23,0,191,193,3,49,24,0,192,190,1,0,0,0,192,
        191,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,
        46,1,0,0,0,196,194,1,0,0,0,197,198,7,0,0,0,198,48,1,0,0,0,199,200,
        7,1,0,0,200,50,1,0,0,0,201,202,5,42,0,0,202,52,1,0,0,0,203,204,5,
        47,0,0,204,54,1,0,0,0,205,206,5,43,0,0,206,56,1,0,0,0,207,208,5,
        45,0,0,208,58,1,0,0,0,209,220,5,33,0,0,210,211,5,61,0,0,211,220,
        5,61,0,0,212,213,5,33,0,0,213,220,5,61,0,0,214,215,5,62,0,0,215,
        220,5,61,0,0,216,217,5,60,0,0,217,220,5,61,0,0,218,220,7,2,0,0,219,
        209,1,0,0,0,219,210,1,0,0,0,219,212,1,0,0,0,219,214,1,0,0,0,219,
        216,1,0,0,0,219,218,1,0,0,0,220,60,1,0,0,0,221,226,5,34,0,0,222,
        225,3,63,31,0,223,225,9,0,0,0,224,222,1,0,0,0,224,223,1,0,0,0,225,
        228,1,0,0,0,226,227,1,0,0,0,226,224,1,0,0,0,227,229,1,0,0,0,228,
        226,1,0,0,0,229,230,5,34,0,0,230,62,1,0,0,0,231,232,5,92,0,0,232,
        236,5,34,0,0,233,234,5,92,0,0,234,236,5,92,0,0,235,231,1,0,0,0,235,
        233,1,0,0,0,236,64,1,0,0,0,237,238,7,3,0,0,238,239,1,0,0,0,239,240,
        6,32,0,0,240,66,1,0,0,0,241,242,5,47,0,0,242,243,5,47,0,0,243,247,
        1,0,0,0,244,246,9,0,0,0,245,244,1,0,0,0,246,249,1,0,0,0,247,248,
        1,0,0,0,247,245,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,250,252,
        5,13,0,0,251,250,1,0,0,0,251,252,1,0,0,0,252,253,1,0,0,0,253,254,
        5,10,0,0,254,255,1,0,0,0,255,256,6,33,0,0,256,68,1,0,0,0,257,258,
        5,47,0,0,258,259,5,42,0,0,259,263,1,0,0,0,260,262,9,0,0,0,261,260,
        1,0,0,0,262,265,1,0,0,0,263,264,1,0,0,0,263,261,1,0,0,0,264,266,
        1,0,0,0,265,263,1,0,0,0,266,267,5,42,0,0,267,268,5,47,0,0,268,269,
        1,0,0,0,269,270,6,34,0,0,270,70,1,0,0,0,14,0,149,160,166,187,192,
        194,219,224,226,235,247,251,263,1,6,0,0
    ]

class jauanLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    TRUE = 17
    FALSE = 18
    INT = 19
    CONST = 20
    FLOAT = 21
    TIPO = 22
    ID = 23
    ID_LETTER = 24
    DIGITO = 25
    MUL = 26
    DIV = 27
    ADD = 28
    SUB = 29
    OPERADOR = 30
    STRING = 31
    ESC = 32
    WS = 33
    LINE_COMMENT = 34
    COMMENT = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'main'", "':'", "'end'", "'('", "')'", "','", "';'", "'return'", 
            "'var'", "'='", "'if'", "'else'", "'while'", "'scanf'", "'print'", 
            "'break'", "'true'", "'false'", "'const'", "'*'", "'/'", "'+'", 
            "'-'" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "INT", "CONST", "FLOAT", "TIPO", "ID", "ID_LETTER", 
            "DIGITO", "MUL", "DIV", "ADD", "SUB", "OPERADOR", "STRING", 
            "ESC", "WS", "LINE_COMMENT", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "TRUE", "FALSE", "INT", "CONST", "FLOAT", 
                  "TIPO", "ID", "ID_LETTER", "DIGITO", "MUL", "DIV", "ADD", 
                  "SUB", "OPERADOR", "STRING", "ESC", "WS", "LINE_COMMENT", 
                  "COMMENT" ]

    grammarFileName = "jauan.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


