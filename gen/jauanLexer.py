# Generated from D:/Victor/Projetos/Jauan\jauan.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,274,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,
        1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,
        11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
        13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
        16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,
        19,4,19,152,8,19,11,19,12,19,153,1,20,1,20,1,20,1,20,1,20,1,20,1,
        21,4,21,163,8,21,11,21,12,21,164,1,21,1,21,4,21,169,8,21,11,21,12,
        21,170,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
        22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,192,8,22,1,23,1,23,1,
        23,5,23,197,8,23,10,23,12,23,200,9,23,1,24,1,24,1,25,1,25,1,26,1,
        26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,3,30,223,8,30,1,31,1,31,1,31,5,31,228,8,31,10,31,12,
        31,231,9,31,1,31,1,31,1,32,1,32,1,32,1,32,3,32,239,8,32,1,33,1,33,
        1,33,1,33,1,34,1,34,1,34,1,34,5,34,249,8,34,10,34,12,34,252,9,34,
        1,34,3,34,255,8,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,5,35,
        265,8,35,10,35,12,35,268,9,35,1,35,1,35,1,35,1,35,1,35,3,229,250,
        266,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,1,0,4,3,0,65,90,95,95,97,122,1,0,48,57,2,0,60,60,
        62,62,3,0,9,10,12,13,32,32,292,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
        0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,78,1,0,0,0,
        5,80,1,0,0,0,7,84,1,0,0,0,9,86,1,0,0,0,11,88,1,0,0,0,13,90,1,0,0,
        0,15,92,1,0,0,0,17,99,1,0,0,0,19,103,1,0,0,0,21,105,1,0,0,0,23,108,
        1,0,0,0,25,113,1,0,0,0,27,119,1,0,0,0,29,125,1,0,0,0,31,131,1,0,
        0,0,33,137,1,0,0,0,35,139,1,0,0,0,37,144,1,0,0,0,39,151,1,0,0,0,
        41,155,1,0,0,0,43,162,1,0,0,0,45,191,1,0,0,0,47,193,1,0,0,0,49,201,
        1,0,0,0,51,203,1,0,0,0,53,205,1,0,0,0,55,207,1,0,0,0,57,209,1,0,
        0,0,59,211,1,0,0,0,61,222,1,0,0,0,63,224,1,0,0,0,65,238,1,0,0,0,
        67,240,1,0,0,0,69,244,1,0,0,0,71,260,1,0,0,0,73,74,5,109,0,0,74,
        75,5,97,0,0,75,76,5,105,0,0,76,77,5,110,0,0,77,2,1,0,0,0,78,79,5,
        58,0,0,79,4,1,0,0,0,80,81,5,101,0,0,81,82,5,110,0,0,82,83,5,100,
        0,0,83,6,1,0,0,0,84,85,5,40,0,0,85,8,1,0,0,0,86,87,5,41,0,0,87,10,
        1,0,0,0,88,89,5,44,0,0,89,12,1,0,0,0,90,91,5,59,0,0,91,14,1,0,0,
        0,92,93,5,114,0,0,93,94,5,101,0,0,94,95,5,116,0,0,95,96,5,117,0,
        0,96,97,5,114,0,0,97,98,5,110,0,0,98,16,1,0,0,0,99,100,5,118,0,0,
        100,101,5,97,0,0,101,102,5,114,0,0,102,18,1,0,0,0,103,104,5,61,0,
        0,104,20,1,0,0,0,105,106,5,105,0,0,106,107,5,102,0,0,107,22,1,0,
        0,0,108,109,5,101,0,0,109,110,5,108,0,0,110,111,5,115,0,0,111,112,
        5,101,0,0,112,24,1,0,0,0,113,114,5,119,0,0,114,115,5,104,0,0,115,
        116,5,105,0,0,116,117,5,108,0,0,117,118,5,101,0,0,118,26,1,0,0,0,
        119,120,5,115,0,0,120,121,5,99,0,0,121,122,5,97,0,0,122,123,5,110,
        0,0,123,124,5,102,0,0,124,28,1,0,0,0,125,126,5,112,0,0,126,127,5,
        114,0,0,127,128,5,105,0,0,128,129,5,110,0,0,129,130,5,116,0,0,130,
        30,1,0,0,0,131,132,5,98,0,0,132,133,5,114,0,0,133,134,5,101,0,0,
        134,135,5,97,0,0,135,136,5,107,0,0,136,32,1,0,0,0,137,138,5,33,0,
        0,138,34,1,0,0,0,139,140,5,116,0,0,140,141,5,114,0,0,141,142,5,117,
        0,0,142,143,5,101,0,0,143,36,1,0,0,0,144,145,5,102,0,0,145,146,5,
        97,0,0,146,147,5,108,0,0,147,148,5,115,0,0,148,149,5,101,0,0,149,
        38,1,0,0,0,150,152,3,51,25,0,151,150,1,0,0,0,152,153,1,0,0,0,153,
        151,1,0,0,0,153,154,1,0,0,0,154,40,1,0,0,0,155,156,5,99,0,0,156,
        157,5,111,0,0,157,158,5,110,0,0,158,159,5,115,0,0,159,160,5,116,
        0,0,160,42,1,0,0,0,161,163,3,51,25,0,162,161,1,0,0,0,163,164,1,0,
        0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,166,1,0,0,0,166,168,5,46,
        0,0,167,169,3,51,25,0,168,167,1,0,0,0,169,170,1,0,0,0,170,168,1,
        0,0,0,170,171,1,0,0,0,171,44,1,0,0,0,172,173,5,105,0,0,173,174,5,
        110,0,0,174,192,5,116,0,0,175,176,5,115,0,0,176,177,5,116,0,0,177,
        192,5,114,0,0,178,179,5,102,0,0,179,180,5,108,0,0,180,181,5,111,
        0,0,181,182,5,97,0,0,182,192,5,116,0,0,183,184,5,98,0,0,184,185,
        5,111,0,0,185,186,5,111,0,0,186,192,5,108,0,0,187,188,5,118,0,0,
        188,189,5,111,0,0,189,190,5,105,0,0,190,192,5,100,0,0,191,172,1,
        0,0,0,191,175,1,0,0,0,191,178,1,0,0,0,191,183,1,0,0,0,191,187,1,
        0,0,0,192,46,1,0,0,0,193,198,3,49,24,0,194,197,3,49,24,0,195,197,
        3,51,25,0,196,194,1,0,0,0,196,195,1,0,0,0,197,200,1,0,0,0,198,196,
        1,0,0,0,198,199,1,0,0,0,199,48,1,0,0,0,200,198,1,0,0,0,201,202,7,
        0,0,0,202,50,1,0,0,0,203,204,7,1,0,0,204,52,1,0,0,0,205,206,5,42,
        0,0,206,54,1,0,0,0,207,208,5,47,0,0,208,56,1,0,0,0,209,210,5,43,
        0,0,210,58,1,0,0,0,211,212,5,45,0,0,212,60,1,0,0,0,213,214,5,61,
        0,0,214,223,5,61,0,0,215,216,5,33,0,0,216,223,5,61,0,0,217,218,5,
        62,0,0,218,223,5,61,0,0,219,220,5,60,0,0,220,223,5,61,0,0,221,223,
        7,2,0,0,222,213,1,0,0,0,222,215,1,0,0,0,222,217,1,0,0,0,222,219,
        1,0,0,0,222,221,1,0,0,0,223,62,1,0,0,0,224,229,5,34,0,0,225,228,
        3,65,32,0,226,228,9,0,0,0,227,225,1,0,0,0,227,226,1,0,0,0,228,231,
        1,0,0,0,229,230,1,0,0,0,229,227,1,0,0,0,230,232,1,0,0,0,231,229,
        1,0,0,0,232,233,5,34,0,0,233,64,1,0,0,0,234,235,5,92,0,0,235,239,
        5,34,0,0,236,237,5,92,0,0,237,239,5,92,0,0,238,234,1,0,0,0,238,236,
        1,0,0,0,239,66,1,0,0,0,240,241,7,3,0,0,241,242,1,0,0,0,242,243,6,
        33,0,0,243,68,1,0,0,0,244,245,5,47,0,0,245,246,5,47,0,0,246,250,
        1,0,0,0,247,249,9,0,0,0,248,247,1,0,0,0,249,252,1,0,0,0,250,251,
        1,0,0,0,250,248,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,253,255,
        5,13,0,0,254,253,1,0,0,0,254,255,1,0,0,0,255,256,1,0,0,0,256,257,
        5,10,0,0,257,258,1,0,0,0,258,259,6,34,0,0,259,70,1,0,0,0,260,261,
        5,47,0,0,261,262,5,42,0,0,262,266,1,0,0,0,263,265,9,0,0,0,264,263,
        1,0,0,0,265,268,1,0,0,0,266,267,1,0,0,0,266,264,1,0,0,0,267,269,
        1,0,0,0,268,266,1,0,0,0,269,270,5,42,0,0,270,271,5,47,0,0,271,272,
        1,0,0,0,272,273,6,35,0,0,273,72,1,0,0,0,14,0,153,164,170,191,196,
        198,222,227,229,238,250,254,266,1,6,0,0
    ]

class jauanLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    TRUE = 18
    FALSE = 19
    INT = 20
    CONST = 21
    FLOAT = 22
    TIPO = 23
    ID = 24
    ID_LETTER = 25
    DIGITO = 26
    MUL = 27
    DIV = 28
    ADD = 29
    SUB = 30
    OPERADOR = 31
    STRING = 32
    ESC = 33
    WS = 34
    LINE_COMMENT = 35
    COMMENT = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'main'", "':'", "'end'", "'('", "')'", "','", "';'", "'return'", 
            "'var'", "'='", "'if'", "'else'", "'while'", "'scanf'", "'print'", 
            "'break'", "'!'", "'true'", "'false'", "'const'", "'*'", "'/'", 
            "'+'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "INT", "CONST", "FLOAT", "TIPO", "ID", "ID_LETTER", 
            "DIGITO", "MUL", "DIV", "ADD", "SUB", "OPERADOR", "STRING", 
            "ESC", "WS", "LINE_COMMENT", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "TRUE", "FALSE", "INT", "CONST", 
                  "FLOAT", "TIPO", "ID", "ID_LETTER", "DIGITO", "MUL", "DIV", 
                  "ADD", "SUB", "OPERADOR", "STRING", "ESC", "WS", "LINE_COMMENT", 
                  "COMMENT" ]

    grammarFileName = "jauan.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


