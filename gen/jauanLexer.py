# Generated from C:/Users/Reynaldo/Desktop/Jauan/Jauan\jauan.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,275,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
        1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,
        11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
        14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
        16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,176,8,
        20,1,21,1,21,1,21,5,21,181,8,21,10,21,12,21,184,9,21,1,21,1,21,1,
        22,1,22,1,22,1,22,3,22,192,8,22,1,23,4,23,195,8,23,11,23,12,23,196,
        1,24,4,24,200,8,24,11,24,12,24,201,1,24,1,24,4,24,206,8,24,11,24,
        12,24,207,1,25,1,25,1,25,5,25,213,8,25,10,25,12,25,216,9,25,1,26,
        1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,240,8,32,1,33,1,33,
        1,33,1,33,1,34,1,34,1,34,1,34,5,34,250,8,34,10,34,12,34,253,9,34,
        1,34,3,34,256,8,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,5,35,
        266,8,35,10,35,12,35,269,9,35,1,35,1,35,1,35,1,35,1,35,3,182,251,
        267,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,1,0,4,3,0,65,90,95,95,97,122,1,0,48,57,2,0,60,60,
        62,62,3,0,9,10,12,13,32,32,294,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
        0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,75,1,0,0,0,
        5,77,1,0,0,0,7,79,1,0,0,0,9,83,1,0,0,0,11,90,1,0,0,0,13,92,1,0,0,
        0,15,97,1,0,0,0,17,101,1,0,0,0,19,107,1,0,0,0,21,109,1,0,0,0,23,
        111,1,0,0,0,25,117,1,0,0,0,27,120,1,0,0,0,29,125,1,0,0,0,31,131,
        1,0,0,0,33,137,1,0,0,0,35,143,1,0,0,0,37,145,1,0,0,0,39,150,1,0,
        0,0,41,175,1,0,0,0,43,177,1,0,0,0,45,191,1,0,0,0,47,194,1,0,0,0,
        49,199,1,0,0,0,51,209,1,0,0,0,53,217,1,0,0,0,55,219,1,0,0,0,57,221,
        1,0,0,0,59,223,1,0,0,0,61,225,1,0,0,0,63,227,1,0,0,0,65,239,1,0,
        0,0,67,241,1,0,0,0,69,245,1,0,0,0,71,261,1,0,0,0,73,74,5,40,0,0,
        74,2,1,0,0,0,75,76,5,41,0,0,76,4,1,0,0,0,77,78,5,58,0,0,78,6,1,0,
        0,0,79,80,5,101,0,0,80,81,5,110,0,0,81,82,5,100,0,0,82,8,1,0,0,0,
        83,84,5,114,0,0,84,85,5,101,0,0,85,86,5,116,0,0,86,87,5,117,0,0,
        87,88,5,114,0,0,88,89,5,110,0,0,89,10,1,0,0,0,90,91,5,44,0,0,91,
        12,1,0,0,0,92,93,5,109,0,0,93,94,5,97,0,0,94,95,5,105,0,0,95,96,
        5,110,0,0,96,14,1,0,0,0,97,98,5,118,0,0,98,99,5,97,0,0,99,100,5,
        114,0,0,100,16,1,0,0,0,101,102,5,99,0,0,102,103,5,111,0,0,103,104,
        5,110,0,0,104,105,5,115,0,0,105,106,5,116,0,0,106,18,1,0,0,0,107,
        108,5,61,0,0,108,20,1,0,0,0,109,110,5,59,0,0,110,22,1,0,0,0,111,
        112,5,98,0,0,112,113,5,114,0,0,113,114,5,101,0,0,114,115,5,97,0,
        0,115,116,5,107,0,0,116,24,1,0,0,0,117,118,5,105,0,0,118,119,5,102,
        0,0,119,26,1,0,0,0,120,121,5,101,0,0,121,122,5,108,0,0,122,123,5,
        115,0,0,123,124,5,101,0,0,124,28,1,0,0,0,125,126,5,119,0,0,126,127,
        5,104,0,0,127,128,5,105,0,0,128,129,5,108,0,0,129,130,5,101,0,0,
        130,30,1,0,0,0,131,132,5,115,0,0,132,133,5,99,0,0,133,134,5,97,0,
        0,134,135,5,110,0,0,135,136,5,102,0,0,136,32,1,0,0,0,137,138,5,112,
        0,0,138,139,5,114,0,0,139,140,5,105,0,0,140,141,5,110,0,0,141,142,
        5,116,0,0,142,34,1,0,0,0,143,144,5,33,0,0,144,36,1,0,0,0,145,146,
        5,116,0,0,146,147,5,114,0,0,147,148,5,117,0,0,148,149,5,101,0,0,
        149,38,1,0,0,0,150,151,5,102,0,0,151,152,5,97,0,0,152,153,5,108,
        0,0,153,154,5,115,0,0,154,155,5,101,0,0,155,40,1,0,0,0,156,157,5,
        105,0,0,157,158,5,110,0,0,158,176,5,116,0,0,159,160,5,115,0,0,160,
        161,5,116,0,0,161,176,5,114,0,0,162,163,5,102,0,0,163,164,5,108,
        0,0,164,165,5,111,0,0,165,166,5,97,0,0,166,176,5,116,0,0,167,168,
        5,98,0,0,168,169,5,111,0,0,169,170,5,111,0,0,170,176,5,108,0,0,171,
        172,5,118,0,0,172,173,5,111,0,0,173,174,5,105,0,0,174,176,5,100,
        0,0,175,156,1,0,0,0,175,159,1,0,0,0,175,162,1,0,0,0,175,167,1,0,
        0,0,175,171,1,0,0,0,176,42,1,0,0,0,177,182,5,34,0,0,178,181,3,45,
        22,0,179,181,9,0,0,0,180,178,1,0,0,0,180,179,1,0,0,0,181,184,1,0,
        0,0,182,183,1,0,0,0,182,180,1,0,0,0,183,185,1,0,0,0,184,182,1,0,
        0,0,185,186,5,34,0,0,186,44,1,0,0,0,187,188,5,92,0,0,188,192,5,34,
        0,0,189,190,5,92,0,0,190,192,5,92,0,0,191,187,1,0,0,0,191,189,1,
        0,0,0,192,46,1,0,0,0,193,195,3,55,27,0,194,193,1,0,0,0,195,196,1,
        0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,48,1,0,0,0,198,200,3,55,
        27,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,1,0,0,0,201,202,1,0,
        0,0,202,203,1,0,0,0,203,205,5,46,0,0,204,206,3,55,27,0,205,204,1,
        0,0,0,206,207,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,50,1,0,
        0,0,209,214,3,53,26,0,210,213,3,53,26,0,211,213,3,55,27,0,212,210,
        1,0,0,0,212,211,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,
        1,0,0,0,215,52,1,0,0,0,216,214,1,0,0,0,217,218,7,0,0,0,218,54,1,
        0,0,0,219,220,7,1,0,0,220,56,1,0,0,0,221,222,5,42,0,0,222,58,1,0,
        0,0,223,224,5,47,0,0,224,60,1,0,0,0,225,226,5,43,0,0,226,62,1,0,
        0,0,227,228,5,45,0,0,228,64,1,0,0,0,229,240,5,33,0,0,230,231,5,61,
        0,0,231,240,5,61,0,0,232,233,5,33,0,0,233,240,5,61,0,0,234,235,5,
        62,0,0,235,240,5,61,0,0,236,237,5,60,0,0,237,240,5,61,0,0,238,240,
        7,2,0,0,239,229,1,0,0,0,239,230,1,0,0,0,239,232,1,0,0,0,239,234,
        1,0,0,0,239,236,1,0,0,0,239,238,1,0,0,0,240,66,1,0,0,0,241,242,7,
        3,0,0,242,243,1,0,0,0,243,244,6,33,0,0,244,68,1,0,0,0,245,246,5,
        47,0,0,246,247,5,47,0,0,247,251,1,0,0,0,248,250,9,0,0,0,249,248,
        1,0,0,0,250,253,1,0,0,0,251,252,1,0,0,0,251,249,1,0,0,0,252,255,
        1,0,0,0,253,251,1,0,0,0,254,256,5,13,0,0,255,254,1,0,0,0,255,256,
        1,0,0,0,256,257,1,0,0,0,257,258,5,10,0,0,258,259,1,0,0,0,259,260,
        6,34,0,0,260,70,1,0,0,0,261,262,5,47,0,0,262,263,5,42,0,0,263,267,
        1,0,0,0,264,266,9,0,0,0,265,264,1,0,0,0,266,269,1,0,0,0,267,268,
        1,0,0,0,267,265,1,0,0,0,268,270,1,0,0,0,269,267,1,0,0,0,270,271,
        5,42,0,0,271,272,5,47,0,0,272,273,1,0,0,0,273,274,6,35,0,0,274,72,
        1,0,0,0,14,0,175,180,182,191,196,201,207,212,214,239,251,255,267,
        1,6,0,0
    ]

class jauanLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    TIPO = 21
    STRING = 22
    ESC = 23
    INT = 24
    FLOAT = 25
    ID = 26
    ID_LETTER = 27
    DIGITO = 28
    MUL = 29
    DIV = 30
    ADD = 31
    SUB = 32
    OPERADOR = 33
    WS = 34
    LINE_COMMENT = 35
    COMMENT = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "':'", "'end'", "'return'", "','", "'main'", "'var'", 
            "'const'", "'='", "';'", "'break'", "'if'", "'else'", "'while'", 
            "'scanf'", "'print'", "'!'", "'true'", "'false'", "'*'", "'/'", 
            "'+'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "TIPO", "STRING", "ESC", "INT", "FLOAT", "ID", "ID_LETTER", 
            "DIGITO", "MUL", "DIV", "ADD", "SUB", "OPERADOR", "WS", "LINE_COMMENT", 
            "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "TIPO", "STRING", "ESC", "INT", "FLOAT", "ID", "ID_LETTER", 
                  "DIGITO", "MUL", "DIV", "ADD", "SUB", "OPERADOR", "WS", 
                  "LINE_COMMENT", "COMMENT" ]

    grammarFileName = "jauan.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


