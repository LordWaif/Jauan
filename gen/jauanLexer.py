# Generated from C:/Users/bibil/Dropbox/PC/Documents/Jauan\jauan.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,270,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
        12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,
        14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
        17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,4,19,150,
        8,19,11,19,12,19,151,1,20,1,20,1,20,1,20,1,20,1,20,1,21,4,21,161,
        8,21,11,21,12,21,162,1,21,1,21,4,21,167,8,21,11,21,12,21,168,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,3,22,190,8,22,1,23,1,23,1,23,5,23,195,8,
        23,10,23,12,23,198,9,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
        1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,219,
        8,29,1,30,1,30,1,30,5,30,224,8,30,10,30,12,30,227,9,30,1,30,1,30,
        1,31,1,31,1,31,1,31,3,31,235,8,31,1,32,1,32,1,32,1,32,1,33,1,33,
        1,33,1,33,5,33,245,8,33,10,33,12,33,248,9,33,1,33,3,33,251,8,33,
        1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,5,34,261,8,34,10,34,12,34,
        264,9,34,1,34,1,34,1,34,1,34,1,34,3,225,246,262,0,35,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,1,0,4,3,0,
        65,90,95,95,97,122,1,0,48,57,2,0,60,60,62,62,3,0,9,10,12,13,32,32,
        288,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        1,71,1,0,0,0,3,76,1,0,0,0,5,78,1,0,0,0,7,82,1,0,0,0,9,84,1,0,0,0,
        11,86,1,0,0,0,13,88,1,0,0,0,15,90,1,0,0,0,17,97,1,0,0,0,19,101,1,
        0,0,0,21,103,1,0,0,0,23,106,1,0,0,0,25,111,1,0,0,0,27,117,1,0,0,
        0,29,123,1,0,0,0,31,129,1,0,0,0,33,135,1,0,0,0,35,137,1,0,0,0,37,
        142,1,0,0,0,39,149,1,0,0,0,41,153,1,0,0,0,43,160,1,0,0,0,45,189,
        1,0,0,0,47,191,1,0,0,0,49,199,1,0,0,0,51,201,1,0,0,0,53,203,1,0,
        0,0,55,205,1,0,0,0,57,207,1,0,0,0,59,218,1,0,0,0,61,220,1,0,0,0,
        63,234,1,0,0,0,65,236,1,0,0,0,67,240,1,0,0,0,69,256,1,0,0,0,71,72,
        5,109,0,0,72,73,5,97,0,0,73,74,5,105,0,0,74,75,5,110,0,0,75,2,1,
        0,0,0,76,77,5,58,0,0,77,4,1,0,0,0,78,79,5,101,0,0,79,80,5,110,0,
        0,80,81,5,100,0,0,81,6,1,0,0,0,82,83,5,40,0,0,83,8,1,0,0,0,84,85,
        5,41,0,0,85,10,1,0,0,0,86,87,5,44,0,0,87,12,1,0,0,0,88,89,5,59,0,
        0,89,14,1,0,0,0,90,91,5,114,0,0,91,92,5,101,0,0,92,93,5,116,0,0,
        93,94,5,117,0,0,94,95,5,114,0,0,95,96,5,110,0,0,96,16,1,0,0,0,97,
        98,5,118,0,0,98,99,5,97,0,0,99,100,5,114,0,0,100,18,1,0,0,0,101,
        102,5,61,0,0,102,20,1,0,0,0,103,104,5,105,0,0,104,105,5,102,0,0,
        105,22,1,0,0,0,106,107,5,101,0,0,107,108,5,108,0,0,108,109,5,115,
        0,0,109,110,5,101,0,0,110,24,1,0,0,0,111,112,5,119,0,0,112,113,5,
        104,0,0,113,114,5,105,0,0,114,115,5,108,0,0,115,116,5,101,0,0,116,
        26,1,0,0,0,117,118,5,115,0,0,118,119,5,99,0,0,119,120,5,97,0,0,120,
        121,5,110,0,0,121,122,5,102,0,0,122,28,1,0,0,0,123,124,5,112,0,0,
        124,125,5,114,0,0,125,126,5,105,0,0,126,127,5,110,0,0,127,128,5,
        116,0,0,128,30,1,0,0,0,129,130,5,98,0,0,130,131,5,114,0,0,131,132,
        5,101,0,0,132,133,5,97,0,0,133,134,5,107,0,0,134,32,1,0,0,0,135,
        136,5,33,0,0,136,34,1,0,0,0,137,138,5,116,0,0,138,139,5,114,0,0,
        139,140,5,117,0,0,140,141,5,101,0,0,141,36,1,0,0,0,142,143,5,102,
        0,0,143,144,5,97,0,0,144,145,5,108,0,0,145,146,5,115,0,0,146,147,
        5,101,0,0,147,38,1,0,0,0,148,150,3,49,24,0,149,148,1,0,0,0,150,151,
        1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,40,1,0,0,0,153,154,5,
        99,0,0,154,155,5,111,0,0,155,156,5,110,0,0,156,157,5,115,0,0,157,
        158,5,116,0,0,158,42,1,0,0,0,159,161,3,49,24,0,160,159,1,0,0,0,161,
        162,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,
        166,5,46,0,0,165,167,3,49,24,0,166,165,1,0,0,0,167,168,1,0,0,0,168,
        166,1,0,0,0,168,169,1,0,0,0,169,44,1,0,0,0,170,171,5,105,0,0,171,
        172,5,110,0,0,172,190,5,116,0,0,173,174,5,115,0,0,174,175,5,116,
        0,0,175,190,5,114,0,0,176,177,5,102,0,0,177,178,5,108,0,0,178,179,
        5,111,0,0,179,180,5,97,0,0,180,190,5,116,0,0,181,182,5,98,0,0,182,
        183,5,111,0,0,183,184,5,111,0,0,184,190,5,108,0,0,185,186,5,118,
        0,0,186,187,5,111,0,0,187,188,5,105,0,0,188,190,5,100,0,0,189,170,
        1,0,0,0,189,173,1,0,0,0,189,176,1,0,0,0,189,181,1,0,0,0,189,185,
        1,0,0,0,190,46,1,0,0,0,191,196,7,0,0,0,192,195,7,0,0,0,193,195,3,
        49,24,0,194,192,1,0,0,0,194,193,1,0,0,0,195,198,1,0,0,0,196,194,
        1,0,0,0,196,197,1,0,0,0,197,48,1,0,0,0,198,196,1,0,0,0,199,200,7,
        1,0,0,200,50,1,0,0,0,201,202,5,42,0,0,202,52,1,0,0,0,203,204,5,47,
        0,0,204,54,1,0,0,0,205,206,5,43,0,0,206,56,1,0,0,0,207,208,5,45,
        0,0,208,58,1,0,0,0,209,210,5,61,0,0,210,219,5,61,0,0,211,212,5,33,
        0,0,212,219,5,61,0,0,213,214,5,62,0,0,214,219,5,61,0,0,215,216,5,
        60,0,0,216,219,5,61,0,0,217,219,7,2,0,0,218,209,1,0,0,0,218,211,
        1,0,0,0,218,213,1,0,0,0,218,215,1,0,0,0,218,217,1,0,0,0,219,60,1,
        0,0,0,220,225,5,34,0,0,221,224,3,63,31,0,222,224,9,0,0,0,223,221,
        1,0,0,0,223,222,1,0,0,0,224,227,1,0,0,0,225,226,1,0,0,0,225,223,
        1,0,0,0,226,228,1,0,0,0,227,225,1,0,0,0,228,229,5,34,0,0,229,62,
        1,0,0,0,230,231,5,92,0,0,231,235,5,34,0,0,232,233,5,92,0,0,233,235,
        5,92,0,0,234,230,1,0,0,0,234,232,1,0,0,0,235,64,1,0,0,0,236,237,
        7,3,0,0,237,238,1,0,0,0,238,239,6,32,0,0,239,66,1,0,0,0,240,241,
        5,47,0,0,241,242,5,47,0,0,242,246,1,0,0,0,243,245,9,0,0,0,244,243,
        1,0,0,0,245,248,1,0,0,0,246,247,1,0,0,0,246,244,1,0,0,0,247,250,
        1,0,0,0,248,246,1,0,0,0,249,251,5,13,0,0,250,249,1,0,0,0,250,251,
        1,0,0,0,251,252,1,0,0,0,252,253,5,10,0,0,253,254,1,0,0,0,254,255,
        6,33,0,0,255,68,1,0,0,0,256,257,5,47,0,0,257,258,5,42,0,0,258,262,
        1,0,0,0,259,261,9,0,0,0,260,259,1,0,0,0,261,264,1,0,0,0,262,263,
        1,0,0,0,262,260,1,0,0,0,263,265,1,0,0,0,264,262,1,0,0,0,265,266,
        5,42,0,0,266,267,5,47,0,0,267,268,1,0,0,0,268,269,6,34,0,0,269,70,
        1,0,0,0,14,0,151,162,168,189,194,196,218,223,225,234,246,250,262,
        1,6,0,0
    ]

class jauanLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    TRUE = 18
    FALSE = 19
    INT = 20
    CONST = 21
    FLOAT = 22
    TIPO = 23
    ID_L = 24
    DIGITO = 25
    MUL = 26
    DIV = 27
    ADD = 28
    SUB = 29
    OPERADOR = 30
    STRING = 31
    ESC = 32
    WS = 33
    LINE_COMMENT = 34
    COMMENT = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'main'", "':'", "'end'", "'('", "')'", "','", "';'", "'return'", 
            "'var'", "'='", "'if'", "'else'", "'while'", "'scanf'", "'print'", 
            "'break'", "'!'", "'true'", "'false'", "'const'", "'*'", "'/'", 
            "'+'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "INT", "CONST", "FLOAT", "TIPO", "ID_L", "DIGITO", 
            "MUL", "DIV", "ADD", "SUB", "OPERADOR", "STRING", "ESC", "WS", 
            "LINE_COMMENT", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "TRUE", "FALSE", "INT", "CONST", 
                  "FLOAT", "TIPO", "ID_L", "DIGITO", "MUL", "DIV", "ADD", 
                  "SUB", "OPERADOR", "STRING", "ESC", "WS", "LINE_COMMENT", 
                  "COMMENT" ]

    grammarFileName = "jauan.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


